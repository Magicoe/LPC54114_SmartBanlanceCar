<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mpu9250_spi_int.out]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mpu9250_spi_int.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Oct 13 21:54:44 2017
<BR><P>
<H3>Maximum Stack Usage =        524 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; InitBleSubsystem &rArr; QN_isp_download &rArr; isp &rArr; qn_api_nvds_put &rArr; nvds_put &rArr; nvds_purge &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[4c]">ADC0_SEQA_DriverIRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">ADC0_SEQA_DriverIRQHandler</a><BR>
 <LI><a href="#[9f]">CLOCK_GetFlexCommClkFreq</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">CLOCK_GetFreq</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4c]">ADC0_SEQA_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[21]">ADC0_SEQA_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[4d]">ADC0_SEQB_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[22]">ADC0_SEQB_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[4e]">ADC0_THCMP_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[23]">ADC0_THCMP_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[40]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[15]">CTIMER0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[41]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER1_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[16]">CTIMER1_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[5a]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER2_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[2f]">CTIMER2_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[43]">CTIMER3_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER3_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[18]">CTIMER3_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[5b]">CTIMER4_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER4_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[30]">CTIMER4_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[37]">DMA0_DriverIRQHandler</a> from fsl_dma.o(i.DMA0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[c]">DMA0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[4f]">DMIC0_DriverIRQHandler</a> from fsl_dmic.o(i.DMIC0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[24]">DMIC0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[60]">DbgConsole_Putchar</a> from fsl_debug_console.o(i.DbgConsole_Putchar) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[44]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[19]">FLEXCOMM0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[45]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[1a]">FLEXCOMM1_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[46]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[1b]">FLEXCOMM2_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[47]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[1c]">FLEXCOMM3_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[48]">FLEXCOMM4_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM4_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[1d]">FLEXCOMM4_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[49]">FLEXCOMM5_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM5_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[1e]">FLEXCOMM5_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[4a]">FLEXCOMM6_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM6_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[1f]">FLEXCOMM6_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[4b]">FLEXCOMM7_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM7_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[20]">FLEXCOMM7_IRQHandler</a> from ble_uart_int.o(i.FLEXCOMM7_IRQHandler) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[38]">GINT0_DriverIRQHandler</a> from fsl_gint.o(i.GINT0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[d]">GINT0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[39]">GINT1_DriverIRQHandler</a> from fsl_gint.o(i.GINT1_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[e]">GINT1_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[50]">HWVAD0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[25]">HWVAD0_IRQHandler</a> from fsl_dmic.o(i.HWVAD0_IRQHandler) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[54]">IOH_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[29]">IOH_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[55]">MAILBOX_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[2a]">MAILBOX_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3f]">MRT0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[14]">MRT0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3a]">PIN_INT0_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[f]">PIN_INT0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3b]">PIN_INT1_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT1_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[10]">PIN_INT1_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3c]">PIN_INT2_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT2_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[11]">PIN_INT2_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3d]">PIN_INT3_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT3_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[12]">PIN_INT3_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[56]">PIN_INT4_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT4_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[2b]">PIN_INT4_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[57]">PIN_INT5_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT5_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[2c]">PIN_INT5_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[58]">PIN_INT6_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT6_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[2d]">PIN_INT6_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[59]">PIN_INT7_DriverIRQHandler</a> from fsl_pint.o(i.PIN_INT7_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[2e]">PIN_INT7_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[53]">RTC_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[28]">RTC_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[5c]">Reserved54_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[31]">Reserved54_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[42]">SCT0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[17]">SCT0_IRQHandler</a> from fsl_sctimer.o(i.SCT0_IRQHandler) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[61]">SCTIMER_EventHandleIRQ</a> from fsl_sctimer.o(i.SCTIMER_EventHandleIRQ) referenced from fsl_sctimer.o(i.SCTIMER_Init)
 <LI><a href="#[5d]">SPIFI0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[32]">SPIFI0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_lpc54114_cm4.o(i.SystemInit) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[5f]">USART_ReadBlocking</a> from fsl_usart.o(i.USART_ReadBlocking) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[5e]">USART_WriteBlocking</a> from fsl_usart.o(i.USART_WriteBlocking) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[52]">USB0_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[27]">USB0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[51]">USB0_NEEDCLK_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[26]">USB0_NEEDCLK_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[3e]">UTICK0_DriverIRQHandler</a> from fsl_utick.o(i.UTICK0_DriverIRQHandler) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[13]">UTICK0_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[62]">UTICK_HandleIRQ</a> from fsl_utick.o(i.UTICK_HandleIRQ) referenced from fsl_utick.o(i.UTICK_Init)
 <LI><a href="#[64]">UTick_Handler_Callback</a> from main.o(i.UTick_Handler_Callback) referenced from main.o(i.main)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[36]">WDT_BOD_DriverIRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[b]">WDT_BOD_IRQHandler</a> from startup_lpc54114_cm4.o(.text) referenced from startup_lpc54114_cm4.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc54114_cm4.o(.text)
 <LI><a href="#[33]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[65]">pint023_intr_callback</a> from main.o(i.pint023_intr_callback) referenced from main.o(i.main)
 <LI><a href="#[66]">pint_intr_callback</a> from ble_wakeup.o(i.pint_intr_callback) referenced from ble_wakeup.o(i.wakeup_init)
 <LI><a href="#[63]">read_app</a> from qn_isp.o(i.read_app) referenced from qn_isp.o(i.isp)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[150]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[67]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[151]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[152]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[153]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[154]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[155]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WDT_BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GINT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GINT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLEXCOMM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLEXCOMM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLEXCOMM6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC0_SEQA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC0_SEQB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC0_THCMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMIC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB0_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IOH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MAILBOX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CTIMER4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>Reserved54_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPIFI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ADC0_SEQA_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_SEQA_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_SEQA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>ADC0_SEQB_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>ADC0_THCMP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>HWVAD0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>IOH_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>MAILBOX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>RTC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>Reserved54_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>SPIFI0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>USB0_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>WDT_BOD_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc54114_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_random_data
</UL>

<P><STRONG><a name="[156]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_msg_hdl
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_cmd_nvds
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_read
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_app
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_config
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>CLOCK_GetExtClkFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetExtClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[158]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_msg_hdl
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartrom_regcb_eaci
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_env_init
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ae]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[12f]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_nvds
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_is_magic_number_ok
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Process
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Process
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Process
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Process
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[15e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[70]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[68]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[15f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[160]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>BLE_Reset</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ble_wakeup.o(i.BLE_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BLE_Reset &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[7f]"></a>BLE_UART_CONFIG</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_uart_int.o(i.BLE_UART_CONFIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = BLE_UART_CONFIG &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableInterrupts
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleSubsystem
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[85]"></a>BLE_UART_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_uart_int.o(i.BLE_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = BLE_UART_Init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableInterrupts
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_PinMuxSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleSubsystem
</UL>

<P><STRONG><a name="[8a]"></a>BLE_wakeup</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_wakeup.o(i.BLE_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_wakeup &rArr; GPIO_WritePinOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_evt
</UL>

<P><STRONG><a name="[8b]"></a>BOARD_BootClockFROHF96M</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockFROHF96M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BOARD_BootClockFROHF96M &rArr; POWER_SetVoltageForFreq &rArr; POWER_setVdLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>BOARD_InitPins</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BOARD_InitPins &rArr; IOCON_PinMuxSet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>CLOCK_AttachClk</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_Init
</UL>

<P><STRONG><a name="[96]"></a>CLOCK_GetAsyncApbClkFreq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetAsyncApbClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLOCK_GetAsyncApbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[97]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, fsl_clock.o(i.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtOscFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAsyncApbClkFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9e]"></a>CLOCK_GetFRGInputClock</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, fsl_clock.o(i.CLOCK_GetFRGInputClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetFRGInputClock &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9f]"></a>CLOCK_GetFlexCommClkFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFlexCommClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = CLOCK_GetFlexCommClkFreq &rArr;  CLOCK_GetFreq (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[81]"></a>CLOCK_GetFreq</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_GetFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtOscFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAsyncApbClkFreq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_CONFIG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_func_init
</UL>

<P><STRONG><a name="[98]"></a>CLOCK_GetFro12MFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetFro12MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9b]"></a>CLOCK_GetFroHfFreq</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetFroHfFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[a0]"></a>CLOCK_GetI2SMClkFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetI2SMClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9d]"></a>CLOCK_GetOsc32KFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOsc32KFreq))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[9c]"></a>CLOCK_GetPllOutFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetPllOutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9a]"></a>CLOCK_GetWdtOscFreq</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetWdtOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[90]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetClkDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[8e]"></a>CLOCK_SetFLASHAccessCyclesForFreq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetFLASHAccessCyclesForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetFLASHAccessCyclesForFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[8f]"></a>CLOCK_SetupFROClocking</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_SetupFROClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SetupFROClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[40]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER0_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER1_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER2_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER3_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>CTIMER4_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER4_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>CTIMER_GenericIRQHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fsl_ctimer.o(i.CTIMER_GenericIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER4_DriverIRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_DriverIRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_DriverIRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_DriverIRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_DriverIRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>CTIMER_GetDefaultConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = CTIMER_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_func_init
</UL>

<P><STRONG><a name="[a7]"></a>CTIMER_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fsl_ctimer.o(i.CTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = CTIMER_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_func_init
</UL>

<P><STRONG><a name="[a8]"></a>CTIMER_SetupPwm</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, fsl_ctimer.o(i.CTIMER_SetupPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = CTIMER_SetupPwm &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwmb_config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwma_config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_func_init
</UL>

<P><STRONG><a name="[125]"></a>CTIMER_UpdatePwmCounter</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, fsl_ctimer.o(i.CTIMER_UpdatePwmCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CTIMER_UpdatePwmCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_set
</UL>

<P><STRONG><a name="[148]"></a>CheckRxTimeOut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_uart_int.o(i.CheckRxTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckRxTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_payload_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_payload_confirm
</UL>

<P><STRONG><a name="[37]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, fsl_dma.o(i.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>DMIC0_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_dmic.o(i.DMIC0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMIC0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>DbgConsole_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = DbgConsole_Init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[aa]"></a>DbgConsole_Printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleSubsystem
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_msg_hdl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_evt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_error_rsp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_ind_qpps
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pint_intr_callback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_size
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_size
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_in_flash_address
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_payload_data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nvds_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_flash
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_rx_payload
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_open
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_app
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_close
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_rxdone
</UL>

<P><STRONG><a name="[60]"></a>DbgConsole_Putchar</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_debug_console.o(i.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DbgConsole_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[d4]"></a>EnableDeepSleepIRQ</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, fsl_common.o(i.EnableDeepSleepIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnableDeepSleepIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_SetTick
</UL>

<P><STRONG><a name="[44]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>FLEXCOMM4_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>FLEXCOMM5_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM5_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>FLEXCOMM6_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM6_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>FLEXCOMM7_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FLEXCOMM7_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>FLEXCOMM7_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ble_uart_int.o(i.FLEXCOMM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[b0]"></a>FLEXCOMM_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[b1]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXCOMM_SetPeriph &rArr; FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[38]"></a>GINT0_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_gint.o(i.GINT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GINT0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>GINT1_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_gint.o(i.GINT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GINT1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>GPIO_PinInit</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_cmd_adv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Reset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pins_init
</UL>

<P><STRONG><a name="[25]"></a>HWVAD0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_dmic.o(i.HWVAD0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HWVAD0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>INPUTMUX_AttachSignal</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, fsl_inputmux.o(i.INPUTMUX_AttachSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = INPUTMUX_AttachSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init
</UL>

<P><STRONG><a name="[121]"></a>INPUTMUX_Deinit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_inputmux.o(i.INPUTMUX_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INPUTMUX_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init
</UL>

<P><STRONG><a name="[11f]"></a>INPUTMUX_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_inputmux.o(i.INPUTMUX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INPUTMUX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init
</UL>

<P><STRONG><a name="[b3]"></a>InitBleSubsystem</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ble_handler.o(i.InitBleSubsystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = InitBleSubsystem &rArr; QN_isp_download &rArr; isp &rArr; qn_api_nvds_put &rArr; nvds_put &rArr; nvds_purge &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_cmd_adv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QN_app_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_CONFIG
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QN_isp_download
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>KalmanFilter_Process</STRONG> (Thumb, 602 bytes, Stack size 96 bytes, kalman_filter.o(i.KalmanFilter_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = KalmanFilter_Process &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>PINT_EnableCallback</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fsl_pint.o(i.PINT_EnableCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = PINT_EnableCallback &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init
</UL>

<P><STRONG><a name="[be]"></a>PINT_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fsl_pint.o(i.PINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = PINT_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>PINT_PatternMatchResetDetectLogic</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_pint.o(i.PINT_PatternMatchResetDetectLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>PINT_PinInterruptConfig</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_pint.o(i.PINT_PinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = PINT_PinInterruptConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init
</UL>

<P><STRONG><a name="[3a]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT0_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT1_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT2_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT3_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>PIN_INT4_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT4_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>PIN_INT5_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT5_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>PIN_INT6_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT6_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>PIN_INT7_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_pint.o(i.PIN_INT7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT7_DriverIRQHandler &rArr; PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>POWER_SetVoltageForFreq</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, fsl_power_lib.o(i.POWER_SetVoltageForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_SetVoltageForFreq &rArr; POWER_setVdLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_setVdLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[b6]"></a>QN_app_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_env.o(i.QN_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QN_app_init &rArr; app_eaci_init &rArr; uartrom_regcb_eaci
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_env_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleSubsystem
</UL>

<P><STRONG><a name="[b4]"></a>QN_isp_download</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, qn_isp.o(i.QN_isp_download))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = QN_isp_download &rArr; isp &rArr; qn_api_nvds_put &rArr; nvds_put &rArr; nvds_purge &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleSubsystem
</UL>

<P><STRONG><a name="[c5]"></a>RESET_ClearPeripheralReset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fsl_reset.o(i.RESET_ClearPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[88]"></a>RESET_PeripheralReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_reset.o(i.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_Init
</UL>

<P><STRONG><a name="[c6]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fsl_reset.o(i.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[17]"></a>SCT0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_sctimer.o(i.SCT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SCTIMER_EventHandleIRQ</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fsl_sctimer.o(i.SCTIMER_EventHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCTIMER_EventHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sctimer.o(i.SCTIMER_Init)
</UL>
<P><STRONG><a name="[c7]"></a>SCTIMER_GetDefaultConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_sctimer.o(i.SCTIMER_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SCTIMER_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>SCTIMER_Init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, fsl_sctimer.o(i.SCTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SCTIMER_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, system_lpc54114_cm4.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllPreDiv
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllPostDiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllMMult
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWdtOscFreq
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_lpc54114_cm4.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>USART_GetDefaultConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_CONFIG
</UL>

<P><STRONG><a name="[82]"></a>USART_Init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, fsl_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_CONFIG
</UL>

<P><STRONG><a name="[5f]"></a>USART_ReadBlocking</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, fsl_usart.o(i.USART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[cf]"></a>USART_SetBaudRate</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, fsl_usart.o(i.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[5e]"></a>USART_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_usart.o(i.USART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_uart_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[3e]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_utick.o(i.UTICK0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTICK0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54114_cm4.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>UTICK_ClearStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_utick.o(i.UTICK_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_HandleIRQ
</UL>

<P><STRONG><a name="[62]"></a>UTICK_HandleIRQ</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fsl_utick.o(i.UTICK_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTICK_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_utick.o(i.UTICK_Init)
</UL>
<P><STRONG><a name="[d2]"></a>UTICK_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_utick.o(i.UTICK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UTICK_Init &rArr; UTICK_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>UTICK_SetTick</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fsl_utick.o(i.UTICK_SetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UTICK_SetTick &rArr; UTICK_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDeepSleepIRQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>UTick_Handler_Callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.UTick_Handler_Callback))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_common.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetDefaultConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_DriverIRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_DriverIRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadBlocking
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwm
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM7_DriverIRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_DriverIRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetInstance
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_GetInstance
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
</UL>

<P><STRONG><a name="[f8]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc2.o(i.__free$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_eaci_proc
</UL>

<P><STRONG><a name="[d5]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[b9]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Process
</UL>

<P><STRONG><a name="[da]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[d6]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[db]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[d8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[161]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[162]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[163]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f0]"></a>app_eaci_bd_addr_cmp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_util.o(i.app_eaci_bd_addr_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_eaci_bd_addr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_get_rec_idx
</UL>

<P><STRONG><a name="[b7]"></a>app_eaci_cmd_adv</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_generic.o(i.app_eaci_cmd_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = app_eaci_cmd_adv &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleSubsystem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_evt
</UL>

<P><STRONG><a name="[e5]"></a>app_eaci_cmd_nvds</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, app_generic.o(i.app_eaci_cmd_nvds))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = app_eaci_cmd_nvds &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_uart_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_config
</UL>

<P><STRONG><a name="[e6]"></a>app_eaci_data_error_rsp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_data.o(i.app_eaci_data_error_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = app_eaci_data_error_rsp &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_msg_hdl
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_ind
</UL>

<P><STRONG><a name="[e7]"></a>app_eaci_data_ind</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_data.o(i.app_eaci_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = app_eaci_data_ind &rArr; app_eaci_data_ind_qpps &rArr; app_eaci_data_req_qpps &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_error_rsp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_ind_qpps
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_msg_hdl
</UL>

<P><STRONG><a name="[e9]"></a>app_eaci_data_req_qpps</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_data.o(i.app_eaci_data_req_qpps))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = app_eaci_data_req_qpps &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_process
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_ind_qpps
</UL>

<P><STRONG><a name="[ea]"></a>app_eaci_evt</STRONG> (Thumb, 840 bytes, Stack size 56 bytes, app_generic.o(i.app_eaci_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = app_eaci_evt &rArr; nvds_config &rArr; app_eaci_cmd_nvds &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartrom_regcb_eaci
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_set_link_status
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_get_bd_addr_by_param
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_wakeup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_cmd_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_msg_hdl
</UL>

<P><STRONG><a name="[ec]"></a>app_eaci_get_bd_addr_by_param</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_util.o(i.app_eaci_get_bd_addr_by_param))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_evt
</UL>

<P><STRONG><a name="[f3]"></a>app_eaci_get_free_rec_idx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_util.o(i.app_eaci_get_free_rec_idx))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_set_link_status
</UL>

<P><STRONG><a name="[ef]"></a>app_eaci_get_rec_idx</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, app_util.o(i.app_eaci_get_rec_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_eaci_get_rec_idx &rArr; app_eaci_bd_addr_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_bd_addr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_set_link_status
</UL>

<P><STRONG><a name="[c3]"></a>app_eaci_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eaci.o(i.app_eaci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_eaci_init &rArr; uartrom_regcb_eaci
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_uart_read_start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartrom_regcb_eaci
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QN_app_init
</UL>

<P><STRONG><a name="[f2]"></a>app_eaci_msg_hdl</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, eaci.o(i.app_eaci_msg_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = app_eaci_msg_hdl &rArr; app_eaci_evt &rArr; nvds_config &rArr; app_eaci_cmd_nvds &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_evt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_ind
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_error_rsp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_eaci_proc
</UL>

<P><STRONG><a name="[ee]"></a>app_eaci_set_link_status</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, app_util.o(i.app_eaci_set_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_eaci_set_link_status &rArr; app_eaci_get_rec_idx &rArr; app_eaci_bd_addr_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_get_rec_idx
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_get_free_rec_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_evt
</UL>

<P><STRONG><a name="[dc]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[f5]"></a>ble_eaci_proc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, eaci_uart.o(i.ble_eaci_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ble_eaci_proc &rArr; app_eaci_msg_hdl &rArr; app_eaci_evt &rArr; nvds_config &rArr; app_eaci_cmd_nvds &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_msg_hdl
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_msg_que_pop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_msg_que_is_empty
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_process
</UL>

<P><STRONG><a name="[f9]"></a>ble_process</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ble_handler.o(i.ble_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = ble_process &rArr; ble_eaci_proc &rArr; app_eaci_msg_hdl &rArr; app_eaci_evt &rArr; nvds_config &rArr; app_eaci_cmd_nvds &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_req_qpps
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_rxdone
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_eaci_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>ble_uart_rxdone</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, eaci_uart.o(i.ble_uart_rxdone))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ble_uart_rxdone &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_uart_read_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_msg_que_push
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_uart_read_payl
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_uart_read_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_process
</UL>

<P><STRONG><a name="[136]"></a>delay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pint023_intr_callback
</UL>

<P><STRONG><a name="[134]"></a>delayms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.delayms))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pint023_intr_callback
</UL>

<P><STRONG><a name="[f6]"></a>eaci_msg_que_is_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_msg.o(i.eaci_msg_que_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_msg_que_push
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_eaci_proc
</UL>

<P><STRONG><a name="[f7]"></a>eaci_msg_que_pop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_msg.o(i.eaci_msg_que_pop))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_eaci_proc
</UL>

<P><STRONG><a name="[fc]"></a>eaci_msg_que_push</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, app_msg.o(i.eaci_msg_que_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = eaci_msg_que_push
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_msg_que_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_rxdone
</UL>

<P><STRONG><a name="[fb]"></a>eaci_uart_read_hdr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eaci_uart.o(i.eaci_uart_read_hdr))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_rxdone
</UL>

<P><STRONG><a name="[fd]"></a>eaci_uart_read_payl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eaci_uart.o(i.eaci_uart_read_payl))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_rxdone
</UL>

<P><STRONG><a name="[f1]"></a>eaci_uart_read_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eaci_uart.o(i.eaci_uart_read_start))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_rxdone
</UL>

<P><STRONG><a name="[e4]"></a>eaci_uart_write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, eaci_uart.o(i.eaci_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_cmd_nvds
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_cmd_adv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_req_qpps
</UL>

<P><STRONG><a name="[d9]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[c4]"></a>isp</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, qn_isp.o(i.isp))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = isp &rArr; qn_api_nvds_put &rArr; nvds_put &rArr; nvds_purge &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_nvds_put
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_nvds_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_errno
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_app
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_close
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QN_isp_download
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 542 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = main &rArr; InitBleSubsystem &rArr; QN_isp_download &rArr; isp &rArr; qn_api_nvds_put &rArr; nvds_put &rArr; nvds_purge &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwmb_config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwma_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_process
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_SetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_GetDefaultConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleSubsystem
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Deinit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_AttachSignal
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[11d]"></a>motor_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_pwm_tb6612fng.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = motor_init &rArr; tb6612_func_init &rArr; CTIMER_SetupPwm &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwmb_config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwma_config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_func_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>motor_speed_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, driver_pwm_tb6612fng.o(i.motor_speed_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = motor_speed_set &rArr; CTIMER_UpdatePwmCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_UpdatePwmCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>nvds_config</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, qn_config.o(i.nvds_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = nvds_config &rArr; app_eaci_cmd_nvds &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_cmd_nvds
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_evt
</UL>

<P><STRONG><a name="[65]"></a>pint023_intr_callback</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, main.o(i.pint023_intr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = pint023_intr_callback &rArr; tb6612_pwmb_config &rArr; CTIMER_SetupPwm &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwmb_config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwma_config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPinInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[66]"></a>pint_intr_callback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ble_wakeup.o(i.pint_intr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = pint_intr_callback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_wakeup.o(i.wakeup_init)
</UL>
<P><STRONG><a name="[11a]"></a>qn_api_close</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, qn_isp_api.o(i.qn_api_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = qn_api_close &rArr; run_to_ram &rArr; write_tx_payload &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_to_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp
</UL>

<P><STRONG><a name="[115]"></a>qn_api_download_app</STRONG> (Thumb, 674 bytes, Stack size 32 bytes, qn_isp_api.o(i.qn_api_download_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = qn_api_download_app &rArr; initialize_flash &rArr; flash_erase &rArr; flash_erase_sector &rArr; set_start_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_location
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_application
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_application
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_ram
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp
</UL>

<P><STRONG><a name="[119]"></a>qn_api_download_nvds</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, qn_isp_api.o(i.qn_api_download_nvds))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = qn_api_download_nvds &rArr; verify_nvds &rArr; read_nvds_data &rArr; read_flash &rArr; write_command_wait_rsp_data &rArr; read_rx_payload_data &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_nvds
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_location
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_size
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_crc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_address
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_is_magic_number_ok
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp
</UL>

<P><STRONG><a name="[117]"></a>qn_api_errno</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, qn_isp_api.o(i.qn_api_errno))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp
</UL>

<P><STRONG><a name="[116]"></a>qn_api_nvds_get</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, qn_isp_api.o(i.qn_api_nvds_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = qn_api_nvds_get &rArr; nvds_get &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp
</UL>

<P><STRONG><a name="[118]"></a>qn_api_nvds_put</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, qn_isp_api.o(i.qn_api_nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = qn_api_nvds_put &rArr; nvds_put &rArr; nvds_purge &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp
</UL>

<P><STRONG><a name="[114]"></a>qn_api_open</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, qn_isp_api.o(i.qn_api_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = qn_api_open &rArr; connect &rArr; BLE_UART_CONFIG &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nvds_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_is_magic_number_ok
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_memory
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp
</UL>

<P><STRONG><a name="[63]"></a>read_app</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, qn_isp.o(i.read_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_app
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qn_isp.o(i.isp)
</UL>
<P><STRONG><a name="[124]"></a>tb6612_func_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, driver_pwm_tb6612fng.o(i.tb6612_func_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tb6612_func_init &rArr; CTIMER_SetupPwm &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwm
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pins_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[14c]"></a>tb6612_pins_init</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, driver_pwm_tb6612fng.o(i.tb6612_pins_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tb6612_pins_init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_func_init
</UL>

<P><STRONG><a name="[122]"></a>tb6612_pwma_config</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, driver_pwm_tb6612fng.o(i.tb6612_pwma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = tb6612_pwma_config &rArr; CTIMER_SetupPwm &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwm
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pint023_intr_callback
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>tb6612_pwmb_config</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, driver_pwm_tb6612fng.o(i.tb6612_pwmb_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = tb6612_pwmb_config &rArr; CTIMER_SetupPwm &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwm
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pint023_intr_callback
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>uartrom_regcb_eaci</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eaci_uart.o(i.uartrom_regcb_eaci))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartrom_regcb_eaci
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_evt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_init
</UL>

<P><STRONG><a name="[b5]"></a>wakeup_init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ble_wakeup.o(i.wakeup_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = wakeup_init &rArr; PINT_PinInterruptConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Deinit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_AttachSignal
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBleSubsystem
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11b]"></a>CLOCK_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>GPIO_ReadPinInput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.GPIO_ReadPinInput))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pint023_intr_callback
</UL>

<P><STRONG><a name="[11c]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>CLOCK_SetFLASHAccessCycles</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetFLASHAccessCycles))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
</UL>

<P><STRONG><a name="[a2]"></a>POWER_DisablePD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock.o(i.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
</UL>

<P><STRONG><a name="[a4]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_ctimer.o(i.CTIMER_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwm
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>CTIMER_GetInstance</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_ctimer.o(i.CTIMER_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwm
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>

<P><STRONG><a name="[a9]"></a>EnableIRQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_ctimer.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwm
</UL>

<P><STRONG><a name="[ac]"></a>DbgConsole_ConvertRadixNumToString</STRONG> (Thumb, 168 bytes, Stack size 36 bytes, fsl_debug_console.o(i.DbgConsole_ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[ab]"></a>DbgConsole_PrintfFormattedData</STRONG> (Thumb, 570 bytes, Stack size 120 bytes, fsl_debug_console.o(i.DbgConsole_PrintfFormattedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfPaddingCharacter
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[ad]"></a>DbgConsole_PrintfPaddingCharacter</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_PrintfPaddingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DbgConsole_PrintfPaddingCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[b2]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[bc]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_pint.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallback
</UL>

<P><STRONG><a name="[bd]"></a>PINT_PinInterruptClrStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_pint.o(i.PINT_PinInterruptClrStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>SCTIMER_GetInstance</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_sctimer.o(i.SCTIMER_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SCTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTIMER_Init
</UL>

<P><STRONG><a name="[d0]"></a>UTICK_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_utick.o(i.UTICK_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = UTICK_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_SetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
</UL>

<P><STRONG><a name="[cb]"></a>GetWdtOscFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_lpc54114_cm4.o(i.GetWdtOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[ce]"></a>findPllMMult</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_lpc54114_cm4.o(i.findPllMMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = findPllMMult &rArr; pllDecodeM
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllDecodeM
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[cd]"></a>findPllPostDiv</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, system_lpc54114_cm4.o(i.findPllPostDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = findPllPostDiv &rArr; pllDecodeP
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllDecodeP
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[cc]"></a>findPllPreDiv</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, system_lpc54114_cm4.o(i.findPllPreDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = findPllPreDiv &rArr; pllDecodeN
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllDecodeN
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[104]"></a>pllDecodeM</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, system_lpc54114_cm4.o(i.pllDecodeM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pllDecodeM
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllMMult
</UL>

<P><STRONG><a name="[106]"></a>pllDecodeN</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, system_lpc54114_cm4.o(i.pllDecodeN))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pllDecodeN
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllPreDiv
</UL>

<P><STRONG><a name="[105]"></a>pllDecodeP</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, system_lpc54114_cm4.o(i.pllDecodeP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pllDecodeP
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllPostDiv
</UL>

<P><STRONG><a name="[8c]"></a>POWER_DisablePD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_config.o(i.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[95]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pin_mux.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[e8]"></a>app_eaci_data_ind_qpps</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, app_data.o(i.app_eaci_data_ind_qpps))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = app_eaci_data_ind_qpps &rArr; app_eaci_data_req_qpps &rArr; eaci_uart_write &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_req_qpps
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_data_ind
</UL>

<P><STRONG><a name="[c2]"></a>app_env_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_env.o(i.app_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_env_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QN_app_init
</UL>

<P><STRONG><a name="[e3]"></a>GPIO_WritePinOutput</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_generic.o(i.GPIO_WritePinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_eaci_cmd_adv
</UL>

<P><STRONG><a name="[103]"></a>GPIO_WritePinOutput</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eaci_uart.o(i.GPIO_WritePinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaci_uart_write
</UL>

<P><STRONG><a name="[dd]"></a>__nvds_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, qn_isp_api.o(i.__nvds_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __nvds_read
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
</UL>

<P><STRONG><a name="[df]"></a>__nvds_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, qn_isp_api.o(i.__nvds_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __nvds_write
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
</UL>

<P><STRONG><a name="[e0]"></a>alloc_rx_payload</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, qn_isp_api.o(i.alloc_rx_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = alloc_rx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_data
</UL>

<P><STRONG><a name="[e1]"></a>alloc_tx_payload</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, qn_isp_api.o(i.alloc_tx_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_location
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_commmand
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_baudrate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_location
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_to_ram
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_application
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_application
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>

<P><STRONG><a name="[e2]"></a>alloc_tx_payload_data_32bit</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, qn_isp_api.o(i.alloc_tx_payload_data_32bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_start_address
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_random_data
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_size
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_crc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_address
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_clock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_size
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_reset_address
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_in_ram_address
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_in_flash_address
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_crc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
</UL>

<P><STRONG><a name="[133]"></a>calc_crc16</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, qn_isp_api.o(i.calc_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_payload_data
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_tx_payload
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[fe]"></a>config</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, qn_isp_api.o(i.config))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = config &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_open
</UL>

<P><STRONG><a name="[ff]"></a>connect</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, qn_isp_api.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = connect &rArr; BLE_UART_CONFIG &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_CONFIG
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Reset
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_baudrate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_payload_confirm
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_open
</UL>

<P><STRONG><a name="[107]"></a>flash_erase</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, qn_isp_api.o(i.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = flash_erase &rArr; flash_erase_sector &rArr; set_start_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_flash
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[108]"></a>flash_erase_chip</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, qn_isp_api.o(i.flash_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = flash_erase_chip &rArr; write_command_wait_rsp_exe_result &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[109]"></a>flash_erase_sector</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, qn_isp_api.o(i.flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = flash_erase_sector &rArr; set_start_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_start_address
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[10c]"></a>free_payload</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, qn_isp_api.o(i.free_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = free_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_application
</UL>

<P><STRONG><a name="[10d]"></a>initialize_flash</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, qn_isp_api.o(i.initialize_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = initialize_flash &rArr; flash_erase &rArr; flash_erase_sector &rArr; set_start_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_random_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_commmand
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_clock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_in_flash_address
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_app
</UL>

<P><STRONG><a name="[112]"></a>initialize_ram</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qn_isp_api.o(i.initialize_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = initialize_ram &rArr; set_app_in_ram_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_in_ram_address
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_app
</UL>

<P><STRONG><a name="[126]"></a>nvds_browse_tag</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, qn_isp_api.o(i.nvds_browse_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nvds_browse_tag &rArr; nvds_walk_tag &rArr; nvds_read &rArr; __nvds_read
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_walk_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>

<P><STRONG><a name="[129]"></a>nvds_erase</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qn_isp_api.o(i.nvds_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvds_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_memory
</UL>

<P><STRONG><a name="[12a]"></a>nvds_get</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, qn_isp_api.o(i.nvds_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = nvds_get &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_browse_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_nvds_get
</UL>

<P><STRONG><a name="[12c]"></a>nvds_init_memory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, qn_isp_api.o(i.nvds_init_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvds_init_memory &rArr; nvds_write &rArr; __nvds_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_open
</UL>

<P><STRONG><a name="[12e]"></a>nvds_is_magic_number_ok</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, qn_isp_api.o(i.nvds_is_magic_number_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvds_is_magic_number_ok &rArr; nvds_read &rArr; __nvds_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_open
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[130]"></a>nvds_purge</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, qn_isp_api.o(i.nvds_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = nvds_purge &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_walk_tag
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[131]"></a>nvds_put</STRONG> (Thumb, 462 bytes, Stack size 176 bytes, qn_isp_api.o(i.nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = nvds_put &rArr; nvds_purge &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_walk_tag
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_nvds_put
</UL>

<P><STRONG><a name="[12b]"></a>nvds_read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, qn_isp_api.o(i.nvds_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvds_read &rArr; __nvds_read
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_walk_tag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_is_magic_number_ok
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
</UL>

<P><STRONG><a name="[127]"></a>nvds_walk_tag</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, qn_isp_api.o(i.nvds_walk_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvds_walk_tag &rArr; nvds_read &rArr; __nvds_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_browse_tag
</UL>

<P><STRONG><a name="[12d]"></a>nvds_write</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, qn_isp_api.o(i.nvds_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvds_write &rArr; __nvds_write
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nvds_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init_memory
</UL>

<P><STRONG><a name="[132]"></a>pack_tx_payload</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, qn_isp_api.o(i.pack_tx_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pack_tx_payload &rArr; calc_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
</UL>

<P><STRONG><a name="[137]"></a>program</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, qn_isp_api.o(i.program))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = program &rArr; set_start_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_start_address
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[138]"></a>program_application</STRONG> (Thumb, 330 bytes, Stack size 64 bytes, qn_isp_api.o(i.program_application))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = program_application &rArr; set_app_size &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_start_address
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_size
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_reset_address
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_crc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_app
</UL>

<P><STRONG><a name="[13c]"></a>protect_application</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, qn_isp_api.o(i.protect_application))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = protect_application &rArr; write_command_wait_rsp_exe_result &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_app
</UL>

<P><STRONG><a name="[146]"></a>read_flash</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, qn_isp_api.o(i.read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = read_flash &rArr; write_command_wait_rsp_data &rArr; read_rx_payload_data &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_data
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_start_address
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nvds_data
</UL>

<P><STRONG><a name="[102]"></a>read_flash_id</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, qn_isp_api.o(i.read_flash_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = read_flash_id &rArr; write_command_wait_rsp_data &rArr; read_rx_payload_data &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[145]"></a>read_nvds_data</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, qn_isp_api.o(i.read_nvds_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = read_nvds_data &rArr; read_flash &rArr; write_command_wait_rsp_data &rArr; read_rx_payload_data &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_nvds
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_open
</UL>

<P><STRONG><a name="[100]"></a>read_rx_payload_confirm</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, qn_isp_api.o(i.read_rx_payload_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_rx_payload_confirm &rArr; CheckRxTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRxTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[149]"></a>read_rx_payload_data</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, qn_isp_api.o(i.read_rx_payload_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = read_rx_payload_data &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRxTimeOut
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_data
</UL>

<P><STRONG><a name="[13d]"></a>run_to_ram</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, qn_isp_api.o(i.run_to_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = run_to_ram &rArr; write_tx_payload &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_close
</UL>

<P><STRONG><a name="[13b]"></a>set_app_crc</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_app_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_app_crc &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_application
</UL>

<P><STRONG><a name="[111]"></a>set_app_in_flash_address</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_app_in_flash_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_app_in_flash_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_flash
</UL>

<P><STRONG><a name="[113]"></a>set_app_in_ram_address</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_app_in_ram_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_app_in_ram_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_ram
</UL>

<P><STRONG><a name="[13e]"></a>set_app_location</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qn_isp_api.o(i.set_app_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = set_app_location &rArr; write_tx_payload &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_app
</UL>

<P><STRONG><a name="[139]"></a>set_app_reset_address</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_app_reset_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_app_reset_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_application
</UL>

<P><STRONG><a name="[13a]"></a>set_app_size</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_app_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_app_size &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_application
</UL>

<P><STRONG><a name="[101]"></a>set_device_baudrate</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_device_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = set_device_baudrate &rArr; write_tx_payload &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[110]"></a>set_flash_clock</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_flash_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_flash_clock &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_flash
</UL>

<P><STRONG><a name="[10f]"></a>set_flash_commmand</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, qn_isp_api.o(i.set_flash_commmand))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = set_flash_commmand &rArr; write_command_wait_rsp_exe_result &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_flash
</UL>

<P><STRONG><a name="[141]"></a>set_nvds_in_ram_address</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_nvds_in_ram_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_nvds_in_ram_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[143]"></a>set_nvds_in_ram_crc</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_nvds_in_ram_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_nvds_in_ram_crc &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[142]"></a>set_nvds_in_ram_size</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, qn_isp_api.o(i.set_nvds_in_ram_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_nvds_in_ram_size &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[140]"></a>set_nvds_location</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qn_isp_api.o(i.set_nvds_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = set_nvds_location &rArr; write_tx_payload &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[10e]"></a>set_random_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, qn_isp_api.o(i.set_random_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = set_random_data &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_flash
</UL>

<P><STRONG><a name="[10b]"></a>set_start_address</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, qn_isp_api.o(i.set_start_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = set_start_address &rArr; alloc_tx_payload_data_32bit &rArr; alloc_tx_payload &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload_data_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_application
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
</UL>

<P><STRONG><a name="[13f]"></a>verify</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, qn_isp_api.o(i.verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = verify &rArr; write_command_wait_rsp_exe_result &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_exe_result
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_tx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_nvds
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_app
</UL>

<P><STRONG><a name="[144]"></a>verify_nvds</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, qn_isp_api.o(i.verify_nvds))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = verify_nvds &rArr; read_nvds_data &rArr; read_flash &rArr; write_command_wait_rsp_data &rArr; read_rx_payload_data &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nvds_data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qn_api_download_nvds
</UL>

<P><STRONG><a name="[147]"></a>write_command_wait_rsp_data</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, qn_isp_api.o(i.write_command_wait_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = write_command_wait_rsp_data &rArr; read_rx_payload_data &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tx_payload
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_payload_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_rx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_id
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>

<P><STRONG><a name="[10a]"></a>write_command_wait_rsp_exe_result</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, qn_isp_api.o(i.write_command_wait_rsp_exe_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = write_command_wait_rsp_exe_result &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRxTimeOut
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_tx_payload
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_random_data
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_size
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_crc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_in_ram_address
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_commmand
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_clock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_size
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_reset_address
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_in_ram_address
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_in_flash_address
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_crc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_application
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_application
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
</UL>

<P><STRONG><a name="[14a]"></a>write_tx_payload</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, qn_isp_api.o(i.write_tx_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = write_tx_payload &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rx_payload_confirm
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_tx_payload
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_command_wait_rsp_data
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_start_address
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvds_location
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_baudrate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_app_location
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_to_ram
</UL>

<P><STRONG><a name="[86]"></a>BLE_UART_PinMuxSetup</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ble_uart_int.o(i.BLE_UART_PinMuxSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_UART_PinMuxSetup &rArr; IOCON_PinMuxSet
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_Init
</UL>

<P><STRONG><a name="[84]"></a>EnableIRQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_uart_int.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_CONFIG
</UL>

<P><STRONG><a name="[89]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_uart_int.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_PinMuxSetup
</UL>

<P><STRONG><a name="[83]"></a>USART_EnableInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_uart_int.o(i.USART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UART_CONFIG
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_WritePinOutput</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_wakeup.o(i.GPIO_WritePinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_wakeup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Reset
</UL>

<P><STRONG><a name="[7c]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_wakeup.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Reset
</UL>

<P><STRONG><a name="[14d]"></a>CTIMER_StartTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_pwm_tb6612fng.o(i.CTIMER_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_func_init
</UL>

<P><STRONG><a name="[14e]"></a>GPIO_WritePinOutput</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, driver_pwm_tb6612fng.o(i.GPIO_WritePinOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwmb_config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pwma_config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pins_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_func_init
</UL>

<P><STRONG><a name="[14f]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, driver_pwm_tb6612fng.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tb6612_pins_init
</UL>

<P><STRONG><a name="[c1]"></a>POWER_setVdLevel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_power_lib.o(i.POWER_setVdLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_setVdLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
